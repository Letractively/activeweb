#summary controller filters explained

<wiki:toc max_depth="2" />

= Introduction =
Controller filters are similar to that of Servlet filters, but designed to wrap execution of controllers. They can be used for many tasks that need to trigger before and after execution of a controller, such as login in, loggin, opening a DB connection, timing, etc. Controller filters are implementation of a [http://en.wikipedia.org/wiki/Chain-of-responsibility_pattern Chain of responsibility] design pattern.


Filters are almost as powerful as controllers. They can inspect any aspects of a request, including request parameters, headers, etc. They can also pre-empt controllers and send different responses than a controller (think of a permission access filter for example, which will redirect to a login screen in case there is an attempt to access a protected resource).


All filters implement this interface:
{{{
package activeweb;
public interface ControllerFilter {
    void before();
    void after();
    void onException(Exception e);
}
}}}

=Filter configuration=

Configuration of filters is done in a class called `app.config.AppControllerConfig`, which needs to extend `activeweb.AbstractControllerConfig`. This class provides ways to bind filters to controllers. It has coarse grain methods for binding as well as
fine grained.
----
<font color="navy">Filters before() methods are executed in the same order as filters are registered.</font>
----

==Adding global filters==

Adding a global filter adds it to all controllers. It makes sense to use this to add timing filters, logging filters, etc.

{{{
public class AppControllerConfig{
  public void init(AppContext context) {
    addGlobalFilters(new TimingFilter());
  }

}
}}}


==Adding controller filters==

To add filters to specific controllers:

{{{
public class AppControllerConfig{
  public void init(AppContext context) {
    add(new TimingFilter()).to(HomeController.class);
  }
}
}}}

Both the "add()" an the "to()" methods take in varargs, allowing to bind multiple filters to multiple controllers in one line of code.
----
<font color="navy">Filters' after() methods are executed in the opposite order as filters are registered.</font>
----

==Adding filters to specific actions==
 
Here is an example of adding a filter to specific actions:
{{{
public class AppControllerConfig{
  public void init(AppContext context) {
    add(new TimingFilter(), new DBConnectionFilter()).to(PostsController.class).forActions("index", "show");
  }
}
}}}

=Exception handling=

The `void onException(Exception e);` method can be used to handle exceptions occurred during execution of a controller of other (inner) filters. It is typical on a project to register a "catch all filter" as a global top-most filter. You probably saw default error page coming from the application server in cases when there is a failure in the application. If you declare a "catch all " filter, this can be avoided, and users would see a friendly page with a message.

Here is an example:
 
{{{
public class CatchAllFilter extends HttpSupportFilter {
    public void onException(Exception e) {
        logError(e.toString(), e);
        render("/system/error", Collections.map("message", "Apologies for inconvenience");
    }
}
}}}

In the code snippet above, the `CatchAllFilter` will be given a change to log an exception to a log system, but then also to display a friendly styled error page in layout.

=Out of the box filters=

!ActiveWeb provides a number of filters for easy configuration of projects. 

==DBConnectionFilter==
DBConnectionFilter is used to open a connection before execution of a controller and closes it after execution. 
Here is an example of usage of this filter from Kitchensink project:
{{{
public class AppControllerConfig extends AbstractControllerConfig {
    public void init(AppContext context) {
        add(new DBConnectionFilter()).to(PostsController.class, RpostsController.class);
    }
}
}}}
In the example above, this filter is attached only to controllers PostsController and RpostsController, presumably other controllers do not require a DB connection. If you use [http://code.google.com/p/activejdbc/ ActiveJDBC] for persistence layer, you do not need to do anything else. If you just want to get access to the underlying DB connection, you can do this inside a controller or inner filter:
{{{
java.sql.Connection connection = Base.connection();
}}}
which gives you a full control over this connection.

==!TimingFilter==

Timing filter times how long a request takes to process and logs this to a logging system inside its `after()` method. 

It is best to have a timing filter to be registered as a global filter:

{{{
public class AppControllerConfig extends AbstractControllerConfig {

    public void init(AppContext context) {
        addGlobalFilters(new TimingFilter());
       ....register other filters
    }
}
}}}
Example output from `TimingFilter`:
{{{
52248 [920503681@qtp-1457284258-3] INFO activeweb.controller_filters.TimingFilter - Processed request in: 14 milliseconds
}}}