#summary ActiveWeb promotes TDD/BDD with convenient APIs

<wiki:toc max_depth="2" />

= TDD/BDD with !ActiveWeb =

!ActiveWeb shines when it comes to testing. Specifically, it promotes TDD/BDD approach to testing of wen applications. At the heart, it uses [http://www.junit.org/ JUnit] as a testing framework, but it provides a number of test classes to be sub-classed for  various purposes. !ActiveWeb allows to do a full test of any web functionality during a regular build. !ActiveWeb provides a number of classes for testing.

!ActiveWeb classes that make it easy to test all have a suffix "Spec". This is a nod to RSpec, but also a good practice - think of these not as tests that assert as is usually done in Java projects, but as specs, or specifications of behavior. The more you think of them as specifications/blueprints, the more you will think of writing them before implementation. 


=DBSpec for database tests=

`activeweb.DBSpec`  is a super class for tests which require a database connection. It is integrated with !ActiveWeb configuration and will automatically open and close a database connection before and after a test respectively. 
It is customary for !ActiveWeb projects to use a database for testing that is different than the one that is used for running the project live even on a developers workstation. This makers it easy to preserve data in place in the "development" database, and still use the full power of database CRUD access to your test database. 

For example, you could have some user data in a development database which will allow you to log in, and perform other operations, and yet you can run test logic against your test database, destroy and re-create any data in it, without having to destroy your development database.

While DBSpec is usually used to test models, it can be used to test any code that require a database connection. If you need to get a hold of that connection, you can use class Base from ActiveJDBC:
{{{
java.sql.Connection connection = Base.connection();
}}}

===Configuration===
Database configuration is described on DatabaseConfiguration page. DBSpec class will look for connections configured with a method `testing()`. Example taken from DatabaseConfiguration page:

{{{
 1. public class DbConfig extends AbstractDBConfig {
 2.  public void init(AppContext context) {
 3.      environment("development").jndi("jdbc/kitchensink_development");
 4.      environment("development").testing().jdbc("com.mysql.jdbc.Driver", "jdbc:mysql://localhost/kitchensink_development", "root", "****");
 5.      environment("hudson").testing().jdbc("com.mysql.jdbc.Driver", "jdbc:mysql://172.30.64.31/kitchensink_hudson", "root", "****");
 6.      environment("production").jndi("jdbc/kitchensink_production");
 7.  }
 8.}
}}}

Specifically, line 4 configures a test connection to be used during the test.
In case you work with multiple databases, you can configure more than one test connection. DBSpec will open all connections marked for tests.

==Transaction management==

DBSpec will  start a transaction before the test and roll it back after the test, ensuring integrity of data in a test database, and also that different tests would not affect one another by modifying data in the database. 

== Example of a DBSpec test ==

Lets say we are developing a blog, and we need to persist a post. A post will have title, content and author. All these attributes are required. A test will look like this then:

{{{
public class PostSpec extends DBSpec {
    @Test
    public void shouldValidateRequiredAttributes(){
        Post post = new Post();
        a(post).shouldNotBe("valid");
        a(post.errors().get("author")).shouldBeEqual("Author must be provided");
        post.set("title", "fake title", "author", "fake author", "content", "fake content");
        a(post).shouldBe("valid");
        post.save();
        a(Post.count()).shouldBeEqual(1);
    }
}
}}}


technically speaking you can use it for any test requiring a connection, but it also easy to use for Model tests. Model tests are tests for ActiveJDBC models. In case you use Hibernate or another persistence framework, you will have to setup connections in a different way.


Here is an example of a model we are testing:
{{{
public class Post extends Model {
    static {
        validatePresenceOf("title", "content");
        validatePresenceOf("author").message("Author must be provided");
    }
}
}}} 


= !ControllerSpec - test your controllers=

`activeweb.ControllerSpec` is a super class for controller tests. This class is used by unit tests that test a single controller. Controllers are tested by simulating a web request to a controller (no physical network is involved, and no container initialized).

==Naming convention==
Subclasses must follow a simple naming convention: subclass name must be made of two words: controller short class name and word "Spec". Example, if there is a controller:
{{{
 public class GreeterController extends AppController{
   ...
 }
}}}

then the test will look like this:
 {{{

 public class GreeterControllerSpec extends ControllerSpec{
 ...
 }
}}}


==Mocking and testing==
Mocking and testing of services is related to the concept of Dependency Injection and is described on [DependencyInjection#Mocking_and_testing]


==Great for TDD==

!ActiveWeb controller specs allow for true TDD, since they do not have a compiler dependency on controllers. You can describe full behavior of your controller before a controller class even exists. Simplest example:
{{{
public GreeterControllerSpec extends ControllerSpec{
  @Test
  public void shouldRespondWithGreetingMessage(){
      request().get("index");
      a(responseCode()).shouldBeEqual(200);
      a(assigns().get("message")).shouldBeEqual("Hello, earthlings!");
  }
}
}}}

In a code snippet above, a request with HTTP GET method is simulated to the GreeterController, index() action.

Controller is expected to assign an object called "message" with value "Hello, earthlings!" to a view. 

It is easy to describe a controller behavior in a !ControllerSpec, making it trivial and pleasurable to practice real 



=DBControllerSpec - test controllers with DB connection=

`activeweb.DBCOntrollerSpec` class serves as a super class for controller tests requiring database connections. In effect, this class combines the logic of !ControllerSpec and DBSpec. When it comes to naming convention of a controller to be tested, the functionality is identical that of !ControllerSpec, but at the same time it will open a connection to DB before test and close after (will also roll back transaction) 




= !IntegrationSpec - test multiple controllers together =

While ControllerSpec and DBControllerSpec allow to test a single controller, the class IntegrationSpec allows to write entire scenarios for testing multiple controllers.

Example:
{{{
1. public class SimpleSpec extends IntegrationSpec {
2.     @Test public void shouldNavigateToTwoControllers(){
3.         controller("home").get("index");        
4.         a(statusCode()).shouldBeEqual(200);        
5.         controller("greeter").param("name", "Bob").integrateViews().get("index");        
6.         a(responseContent().contains("Our special greeting is extended to Bob")).shouldBeTrue();        
7.     }
8. }
}}}


Lets decompose code snippet:

  * Line 3: a controller !HomeController is executed with HTTP GET  request which is dispatched to its action index()
  * Line 4: we verify that the response code of execution was 200
  * Line 5: controller !GreeterController's index() action is executed with HTTP GET and parameter name=Bob. Additionally, we call method `integrateViews()` which will require the framework to execute the corresponding view after controller, which will provide us with that view's output - usually HTML, but can be XML, Json, whatever  that view is producing.
  * Line 6; we examine the content of the produced view output. 

Note that we can run this code even in the absence of both controllers, but of course it will fail. Now, we can actually write controller classes to satisfy the tests, lets write a !GreetingController (as being the most "complicated" of the two):

{{{
public void GreeterController extends AppController{
  public void index(){
     view("name", param("name"));
  }
}
}}}

The corresponding view might look like:
<code language="html">
<span>Our special greeting is extended to ${name}</span>
</code>
and will be located in file:
{{{
/views/greeter/index.ftl
}}}


=DBIntegrationSpec - combines !IntegrationSpec and DBSpec =

`activeweb.DBIntegrationSpec` class serves as a super class for controller tests requiring database connections. In effect, this class combines the logic of IntegrationSpec and DBSpec. It will allow to write scenarios to test multiple controllers, but at the same time it will open a connection to DB before test and close after (will also roll back transaction), as DBSpec would. 

= !AppIntegrationSpec - bootstraps !ControllerFilters into test=

`activeweb.AppIntegrationSpec` is a class that will bootstrap entire application, complete with ControllerFilters. The only difference of running your application under AppIntegrationSpec and running it live, is that the DBConnectionFilter is disabled, and instead database connection is provided exactly the same way as in DBSpec, DBControllerSpec or DBIntegrationSpec.

In other words, think of AppIntegrationSpec as the same with DBIntegrationSpec, but all filters will trigger as in a real application. 


=Conclusion=
This collection of super classes allows to write very thorough set of tests covering application functionality