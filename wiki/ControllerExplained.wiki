#summary learn all about ActiveWeb controllers


==Introduction==


Controllers are at the heart of an !ActiveWeb application. These are classes wich designed to process an HTTP request. They are somewhat similar to Java Servlets, but even more similar to Ruby on Rails, Grails and SpringMVC controllers. A simplest controller looks like this:
{{{
public class GreetingController extends AppController{
   public void index(){}
}
}}}

A controller above is a working controller, even though it does not have any code in it. Such a controller is automatically mapped to a URL"
{{{
http://host:port/context/greeting
}}}

==Controller actions==

A controller action is a method that is designed to process an HTTP request. For example, in the example above, the URL will be mapped to the "action" index by default. However, if the URL looked like this:
{{{
http://host:port/context/greeting/hello
}}}
then it would map to action "hello":
{{{
public class GreetingController extends AppController{
   public void hello(){}
}
}}}


==Standard controllers and HTTP methods==

The HTTP specification defines methods: GET, POST, DELETE, PUT, CONNECT and HEAD. Currently ActiveWeb supports  GET, POST, DELETE, PUT, as the most used methods. 

An HTTP request is not only mapped to an action, but also its HTTP method must correspond to an action's HTTP method. Action HTTP methods are configured with annotations, {{{@GET, @POST, @PUT, and @DELETE}}}. 

<table border = "1">
<tr> 
<td>
<font color="navy">*However, if annotation is missing, an action is mapped to HTTP GET method by default* </font>
</td>
</tr>
</table>
This makes it unnecessary to use annotations except cases when you need so-called "destructive" action. A destructive action is the one that is designed to change a state of a resource (in REST style of web programming). 

Here is an example of a destructive action is:
{{{
public class BooksController extends AppController{

   @PUT
   public void updateBook(){}
}
}}}

!ActiveWeb promotes REST-style web programming and will not allow to access an action that is configured for one HTTP method with another. For instance, I you try to access the `GreetingController#index` with HTTP method POST, you would get an exception:
{{{
activeweb.ControllerException: Cannot access action app.controllers.GreetingController.index with HTTP method: 'POST' because it is configured for method: 'GET'
}}}


    * standard controllers + HTTP method annotations
    * RESTful controllers
    * default mapping to views
    * override mapping to views
    * default layouts
    * custom layouts
    * Ajax related APIs
    * download of files
    * streaming of data to client
    * upload of files
    * session management
    * cookies
    * built in logging
    * logging of request parameters 
    * Thread safe