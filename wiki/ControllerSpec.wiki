#summary description of controller unit specs

<wiki:toc max_depth="1" />
= Introduction =

Super class for controller tests. This class is used by unit tests that test a single controller. Controllers are tested by simulating a web request to a controller (no physical network is involved, and no container initialized).

=Naming convention=
Subclasses must follow a simple naming convention: subclass name must be made of two words: controller short class name and word "Spec". Example, of there is a controller:
{{{
 public class GreeterController extends AppController{
   ...
 }
}}}

then the test will look like this:
 {{{

 public class GreeterControllerSpec extends ControllerSpec{
 ...
 }
}}}


=Good for TDD=

ActiveWeb controller specs allow for true TDD, since they do not have a compiler dependency on controllers. You can describe full behavior of your controller before a controller class even exists. Simplest example:
{{{
public GreeterControllerSpec extends ControllerSpec{
  @Test
  public void shouldRespondWithGreetingMessage(){
      request().get("index");
      a(responseCode()).shouldBeEqual(200);
      a(assigns().get("message")).shouldBeEqual("Hello, earthlings!");
  }
}
}}}

In a code snippet above, a request with HTTP GET method is simulated to the GreeterController, index() action.

Controller is expected to assign an object called "message" with value "Hello, earthlings!" to a view. 
